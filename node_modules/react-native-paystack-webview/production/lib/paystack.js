"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const react_native_1 = require("react-native");
const react_native_webview_1 = require("react-native-webview");
const helper_1 = require("./utils/helper");
const style_1 = require("./style");
const constants_1 = require("./utils/constants");
const Paystack = ({ paystackKey, billingEmail, phone, lastName, firstName, amount = constants_1.DEFAULT_AMOUNT, currency = constants_1.DEFAULT_CURRENCY, channels = ["card"], refNumber, billingName, plan, invoice_limit, subaccount, split_code, split, handleWebViewMessage, onCancel, autoStart = false, onSuccess, activityIndicatorColor = constants_1.DEFAULT_ACTIVITY_INDICATOR_COLOR, modalProps, metadata, }, ref) => {
    const [isLoading, setIsLoading] = (0, react_1.useState)(true);
    const [showModal, setShowModal] = (0, react_1.useState)(false);
    const webViewRef = (0, react_1.useRef)(null);
    (0, react_1.useEffect)(() => {
        if (autoStart) {
            setShowModal(true);
        }
    }, [autoStart]);
    (0, react_1.useImperativeHandle)(ref, () => ({
        startTransaction: () => setShowModal(true),
        endTransaction: () => setShowModal(false),
    }));
    const generatePaystackParams = () => {
        const params = [
            (0, helper_1.buildKeyValueString)("key", paystackKey),
            (0, helper_1.buildKeyValueString)("email", billingEmail),
            (0, helper_1.buildKeyValueString)("firstname", firstName),
            (0, helper_1.buildKeyValueString)("lastname", lastName),
            (0, helper_1.buildKeyValueString)("phone", `${phone}`),
            (0, helper_1.buildKeyValueString)("amount", `${(0, helper_1.getAmountValueInKobo)(amount)}`),
            (0, helper_1.buildKeyValueString)("currency", currency),
            (0, helper_1.getChannels)(channels),
            (0, helper_1.buildKeyValueString)("ref", refNumber),
            (0, helper_1.buildKeyValueString)("subaccount", subaccount),
            (0, helper_1.buildKeyValueString)("split_code", split_code),
            (0, helper_1.buildKeyValueString)("plan", plan),
            (0, helper_1.buildKeyValueString)("invoice_limit", invoice_limit?.toString()),
            (0, helper_1.dynamicSplitObjectIsValid)(split)
                ? `split: ${JSON.stringify(split)},`
                : "",
            metadata
                ? `metadata: ${JSON.stringify(metadata)},`
                : `metadata: { custom_fields: [{ display_name: '${firstName} ${lastName}', variable_name: '${billingName}', value: '' }]},`,
        ];
        return params.filter(Boolean).join("\n");
    };
    const HTML_CONTENT = (0, helper_1.paystackHtmlContent)(generatePaystackParams());
    const handleMessageReceived = (0, react_1.useCallback)((data) => {
        const webResponse = JSON.parse(data);
        switch (webResponse.event) {
            case "cancelled":
                onCancel?.({ status: "cancelled", data: webResponse });
                setShowModal(false);
                break;
            case "successful":
                onSuccess?.({
                    status: "success",
                    transactionRef: webResponse.transactionRef,
                    data: webResponse,
                });
                setShowModal(false);
                break;
            default:
                handleWebViewMessage?.({ status: "error", data: webResponse });
                break;
        }
    }, [handleWebViewMessage, onCancel, onSuccess]);
    const handleNavigationStateChange = (0, react_1.useCallback)((state) => {
        if (state.url === constants_1.CLOSE_URL) {
            setShowModal(false);
        }
    }, []);
    const handleError = (0, react_1.useCallback)((error) => {
        handleWebViewMessage?.({ status: "error", data: error });
        setShowModal(false);
    }, [handleWebViewMessage]);
    return (<react_native_1.Modal style={style_1.styles.modalContainer} visible={showModal} animationType="slide" transparent={false} {...modalProps}>
        <react_native_1.SafeAreaView style={{ flex: 1 }}>
          <react_native_webview_1.WebView style={style_1.styles.webView} source={{ html: HTML_CONTENT }} onError={handleError} onMessage={(e) => handleMessageReceived(e.nativeEvent.data)} onLoadStart={() => setIsLoading(true)} onLoadEnd={() => setIsLoading(false)} onNavigationStateChange={handleNavigationStateChange} ref={webViewRef} cacheEnabled={false} cacheMode="LOAD_NO_CACHE"/>
          {isLoading && (<react_native_1.View style={style_1.styles.activityIndicatorContainer}>
              <react_native_1.ActivityIndicator size="large" color={activityIndicatorColor}/>
            </react_native_1.View>)}
        </react_native_1.SafeAreaView>
      </react_native_1.Modal>);
};
exports.default = (0, react_1.forwardRef)(Paystack);
//# sourceMappingURL=paystack.js.map